From 3a9ca619d62e60dd4a5778175f2a8e5edc889ad6 Mon Sep 17 00:00:00 2001
From: Haibo Chen <haibo.chen@nxp.com>
Date: Fri, 10 Jun 2022 14:50:38 +0800
Subject: [PATCH 144/274] MLK-25939-2 Revert "gpio: pca953x: no need to do
 regcache sync without vcc regulator"

The logic of this patch is incorrect, in the pca953x_suspend(), it enable the regmap
cache, and disable regmap cache in pca953x_resume(). So no matter whether there is
vcc regulator, we need to do regcache sync.

Find this issue when we add LVDS panel on imx93-11x11-evk board. This LVDS panel use
one pad of pcal6524 to control its 12V voltage supply (regulator). The sequence in
the system suspend is regulator(disable)->pca953x->drm, but the resume sequence is
drm->regulator(enable)->pca953x, this means there is one gpio operation happen before
the pca953x resume, since we already enable the regmap cache, so this gpio operation
only save in the regmap cache, do not really config in the pcal6534 register. Then in
pca953x resume, skip this regcache sync, then we miss this gpio operation. LVDS panel
can't light up after system resume.

This reverts commit 1681044121fa74b4909feec0fc1928737d7494b2.
Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
Reviewed-by: Jun Li <jun.li@nxp.com>
---
 drivers/gpio/gpio-pca953x.c | 42 +++++++++++++------------------------
 1 file changed, 14 insertions(+), 28 deletions(-)

diff --git a/drivers/gpio/gpio-pca953x.c b/drivers/gpio/gpio-pca953x.c
index 238dc2e69..6889adbe8 100644
--- a/drivers/gpio/gpio-pca953x.c
+++ b/drivers/gpio/gpio-pca953x.c
@@ -983,20 +983,14 @@ static int pca953x_probe(struct i2c_client *client,
 
 	chip->client = client;
 
-	reg = devm_regulator_get_optional(&client->dev, "vcc");
-	if (IS_ERR(reg)) {
-		ret = dev_err_probe(&client->dev, PTR_ERR(reg), "reg get err\n");
-		if (ret == -EPROBE_DEFER)
-			return ret;
-		reg = NULL;
-	}
+	reg = devm_regulator_get(&client->dev, "vcc");
+	if (IS_ERR(reg))
+		return dev_err_probe(&client->dev, PTR_ERR(reg), "reg get err\n");
 
-	if (reg) {
-		ret = regulator_enable(reg);
-		if (ret) {
-			dev_err(&client->dev, "reg en err: %d\n", ret);
-			return ret;
-		}
+	ret = regulator_enable(reg);
+	if (ret) {
+		dev_err(&client->dev, "reg en err: %d\n", ret);
+		return ret;
 	}
 	chip->regulator = reg;
 
@@ -1090,8 +1084,7 @@ static int pca953x_probe(struct i2c_client *client,
 	return 0;
 
 err_exit:
-	if (chip->regulator)
-		regulator_disable(chip->regulator);
+	regulator_disable(chip->regulator);
 	return ret;
 }
 
@@ -1110,8 +1103,7 @@ static int pca953x_remove(struct i2c_client *client)
 		ret = 0;
 	}
 
-	if (chip->regulator)
-		regulator_disable(chip->regulator);
+	regulator_disable(chip->regulator);
 
 	return ret;
 }
@@ -1172,8 +1164,7 @@ static int pca953x_suspend(struct device *dev)
 	if (atomic_read(&chip->wakeup_path))
 		device_set_wakeup_path(dev);
 	else
-		if (chip->regulator)
-			regulator_disable(chip->regulator);
+		regulator_disable(chip->regulator);
 
 	return 0;
 }
@@ -1183,20 +1174,15 @@ static int pca953x_resume(struct device *dev)
 	struct pca953x_chip *chip = dev_get_drvdata(dev);
 	int ret;
 
-	regcache_cache_only(chip->regmap, false);
-
 	if (!atomic_read(&chip->wakeup_path)) {
-		if (chip->regulator) {
-			ret = regulator_enable(chip->regulator);
-			if (ret) {
-				dev_err(dev, "Failed to enable regulator: %d\n", ret);
-				return 0;
-			}
-		} else {
+		ret = regulator_enable(chip->regulator);
+		if (ret) {
+			dev_err(dev, "Failed to enable regulator: %d\n", ret);
 			return 0;
 		}
 	}
 
+	regcache_cache_only(chip->regmap, false);
 	regcache_mark_dirty(chip->regmap);
 	ret = pca953x_regcache_sync(dev);
 	if (ret)
-- 
2.25.1

