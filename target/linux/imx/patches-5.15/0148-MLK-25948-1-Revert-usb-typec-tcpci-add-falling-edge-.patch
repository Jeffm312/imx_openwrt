From ab5aab9ccb6a0ec88c23e9c31297349c77aa92f4 Mon Sep 17 00:00:00 2001
From: Xu Yang <xu.yang_2@nxp.com>
Date: Wed, 15 Jun 2022 10:10:16 +0800
Subject: [PATCH 148/274] MLK-25948-1 Revert "usb: typec: tcpci: add falling
 edge irq type support"

This reverts commit 49a36983b63dea0762df865f806ec6dffd231ee7.

Commit 49a36983b63d is a temporary workaround to use Falling irq for
tcpci driver. It's possible to miss some events in extreme condition.
It's reverted since a better way exists.

Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
Reviewed-by: Jun Li <jun.li@nxp.com>
---
 drivers/usb/typec/tcpm/tcpci.c | 26 +++-----------------------
 1 file changed, 3 insertions(+), 23 deletions(-)

diff --git a/drivers/usb/typec/tcpm/tcpci.c b/drivers/usb/typec/tcpm/tcpci.c
index 8b0d35d82..215104e2e 100644
--- a/drivers/usb/typec/tcpm/tcpci.c
+++ b/drivers/usb/typec/tcpm/tcpci.c
@@ -11,7 +11,6 @@
 #include <linux/i2c.h>
 #include <linux/interrupt.h>
 #include <linux/irq.h>
-#include <linux/of_irq.h>
 #include <linux/property.h>
 #include <linux/regmap.h>
 #include <linux/usb/pd.h>
@@ -46,8 +45,6 @@ struct tcpci {
 
 	struct tcpc_dev tcpc;
 	struct tcpci_data *data;
-	unsigned int irq_mask;
-	bool irq_falling_edge;
 };
 
 struct tcpci_chip {
@@ -689,20 +686,17 @@ static int tcpci_init(struct tcpc_dev *tcpc)
 		if (ret < 0)
 			return ret;
 	}
-	tcpci->irq_mask = reg;
-
 	return tcpci_write16(tcpci, TCPC_ALERT_MASK, reg);
 }
 
 irqreturn_t tcpci_irq(struct tcpci *tcpci)
 {
-	u16 status = 0;
+	u16 status;
 	int ret;
 	unsigned int raw;
 
 	tcpci_read16(tcpci, TCPC_ALERT, &status);
 
-recheck:
 	/*
 	 * Clear alert status for everything except RX_STATUS, which shouldn't
 	 * be cleared until we have successfully retrieved message.
@@ -788,12 +782,6 @@ irqreturn_t tcpci_irq(struct tcpci *tcpci)
 	else if (status & TCPC_ALERT_TX_FAILED)
 		tcpm_pd_transmit_complete(tcpci->port, TCPC_TX_FAILED);
 
-	if (tcpci->irq_falling_edge) {
-		tcpci_read16(tcpci, TCPC_ALERT, &status);
-		if (status & tcpci->irq_mask)
-			goto recheck;
-	}
-
 	return IRQ_HANDLED;
 }
 EXPORT_SYMBOL_GPL(tcpci_irq);
@@ -890,7 +878,6 @@ static int tcpci_probe(struct i2c_client *client,
 		       const struct i2c_device_id *i2c_id)
 {
 	struct tcpci_chip *chip;
-	unsigned long irq_flags, irq_type;
 	int err;
 	u16 val = 0;
 
@@ -915,16 +902,9 @@ static int tcpci_probe(struct i2c_client *client,
 		return PTR_ERR(chip->tcpci);
 
 	irq_set_status_flags(client->irq, IRQ_DISABLE_UNLAZY);
-
-	irq_type = irqd_get_trigger_type(irq_get_irq_data(client->irq));
-	if (irq_type == IRQF_TRIGGER_FALLING) {
-		irq_flags = IRQF_ONESHOT | IRQF_TRIGGER_FALLING;
-		chip->tcpci->irq_falling_edge = true;
-	} else {
-		irq_flags = IRQF_ONESHOT | IRQF_TRIGGER_LOW;
-	}
 	err = devm_request_threaded_irq(&client->dev, client->irq, NULL,
-					_tcpci_irq, irq_flags,
+					_tcpci_irq,
+					IRQF_ONESHOT | IRQF_TRIGGER_LOW,
 					dev_name(&client->dev), chip);
 	if (err < 0) {
 		tcpci_unregister_port(chip->tcpci);
-- 
2.25.1

